memo

javaは汎用言語である。プロジェクト開発言語として、モバイルアプリケーション
デスクトップアプリケーション、ゲーム、サーバサイドアプリケーションなど
実行速度は、Cに劣るが、汎用性は高い。

c言語は、プラットフォーム依存言語で、コンパイルされた同じ環境でないと実行できない。
javaは、プラットフォーム非依存言語で、java仮想マシンJava virtual Machineがインストールされている環境であれば動作する。
コンパイルされると、バイトコードという中間コードに変換され、java仮想マシンはそれを機械言語に変換する。

javac　.class バイトコードに変換
java バイトコードを実行

オブジェクト指向
モノを中心にとらえ、モノが持つ情報、モノのふるまい、モノとモノの関係をプログラミングする技法。
メリットは、大規模な開発において、大人数、長く保守する場合が適当。開発を容易にする。

クラス
オブジェクトの持つデータと振る舞いをまとめたもので、
人間が想像しやすいオブジェクトという概念を用いて、フィールド（データ）とメソッド（振る
舞い）をフォルダの様にまとめて整理し、管理しやすくする仕組みである。大量にインスタンスを生成できるメリット。

インスタンス
クラスから生成された実体で、クラスは設計図。
インスタンス生成は、メモリに記憶領域を確保すること

アクセス制御
フィールドやメソッドのアクセスを制御する。
アクセス修飾子
private 自分のクラス内のみ
なし　自分のパッケージ内のみ
protected 自分のパッケージ内のサブクラスまで
public すべて



カプセル化
モノが持つ情報のうち外部の世界が知る必要のない情報を隠し、保守性を高める
アクセス修飾子を用いる。
メリットは、外部に公開する必要のないフィールドやメソッドを隠ぺいすることで、想定外の使われ方をされることを防ぎバグを減らすことができる。

継承
モノの種類の共通点と相違点を体系的に整理する仕組み

ポリモーフィズム
モノとモノとのやり取りを共通化する仕組み

code







期末テスト過去問情報

